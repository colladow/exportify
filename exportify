#!/usr/bin/env python
from optparse import OptionParser
import sys
import os

def main():
	usage = 'usage: %s [options] input_file [output_file]' % sys.argv[0]
	parser = OptionParser(usage=usage)

	parser.add_option('-l', '--list', action='store_true', dest='list',
										help='list the objects that will be exported')
	parser.add_option('-j', '--jsctagspath', action='store', dest='jsctags_path',
										help='specify the location of the jsctags.js file, defaults to ./jsctags/bin/jsctags.js')
	parser.add_option('-o', '--objects', action='store', dest='object_list',
										help='provide a comma separated list of objects to export and ignore jsctags')

	opts, args = parser.parse_args()

	if (not opts.list and len(args) < 2) or (opts.list and len(args) < 1):
		parser.print_help()
		sys.exit(1)

	try:
		input = open(args[0])
	except:
		print 'Could not open the input file.'
		sys.exit(1)

	# default jsctags path is assumed to be on your PATH
	jsctags_path = 'jsctags.js'

	if opts.jsctags_path:
		jsctags_path = opts.jsctags_path

	objects = []
	if opts.object_list:
		try:
			# parse out the objects form the command line
			for object in opts.object_list.split(','):
				objects.append(JSObject(object.strip()))
		except:
			print 'Your object list is in the wrong format.'
			sys.exit(1)
	else:
		# parse the objects from the generated tags file
		objects = collect_objects(input, jsctags_path)

	if opts.list:
		print 'Objects to be exported:'
		for o in objects: print o
	else:
		try:
			output = open(args[1], 'w')
		except:
			print 'Could not open the output file.'
			sys.exit(1)

		exportify(objects, input, output)

def collect_objects(input, jsctags_path):
	# generate the tags file in the cwd
	os.system('%s -o tags %s' % (jsctags_path, input.name))

	try:
		tags = open('tags')
	except IOError:
		print 'Tags file was not generated properly. Please make sure jsctags.js is on the path, or provide its location with -j.'
		sys.exit(1)

	objects = []

	for line in tags:
		# grab 'top level' objects (objects with no namespace)
		if line.find('namespace:') == -1 and line.find(input.name) > -1:
			objects.append(JSObject.obj_from_line(line))

	tags.close()
	os.remove('tags')

	return objects

def exportify(objects, input, output):
	# copy the input over
	output.write(input.read())
	output.write('\n')

	# add the export lines
	outlines = []
	for object in objects:
		outlines.append('exports.%s = %s;\n' % (object.name, object.name))

	output.writelines(outlines)

	input.close()
	output.close()

class JSObject:
	def __init__(self, name):
		self.name = name

	@classmethod
	def obj_from_line(cls, line):
		name = line[:line.find('\t')]

		return cls(name)

	def __str__(self):
		return self.name

if __name__ == '__main__':
	main()

